redundancia: dades/files que es poder repetir. No interesa.

In/Consistència: Dades no/fiables (dos registres que representen la mateixa informacio i no son iguals).

Integritat: Fiable

SQL (structured query language): llenguatge informatic que permet gestionar bases de dades

 - BD
 - Taula
 - View "Finestres a BD"
 - Users
 - Index
 - Role
 - Functions
 - Triggers
 - Sinonym
 - Sequence

DDL (Data definition language): Gestiona estructures/objectes. (Tots canvis irreversibles)
"CREATE" / "DROP" / "ALTER" / "RENAME" / "TRUNCATE"
    EX: DROP TABLE client;
    EX: TRUNCATE TABLE client;

DML (Data Manipulation Language): Gestió de Dades (Posible recuperació)
"DELETE" / "INSERT" / "UPDATE" / ""
    EX: DELETE TABLE client;
    EX: DELETE FROM client WHERE id=11111;
    


DCL (Data Control Language): Permisos/Privilegis
"GRANT" / "REVOKE"
    EX: GRANT SELECT,DELETE ON cliente TO usuari1;
    EX: REVOKE DELETE ON cliente FROM usuari1;


TCL (Control de Transaccions): Permet gestionar els canvis que es fan en les dades o recuperar dades cada cop que hi han canvis
"BEGIN" / "ROLLBACK" / "SAVEPOINT" / "COMMIT"
BEGIN      : Activa les derreres funcions
ROLLBACK   : Desfer les coses (ctrl+z)
SAVE POINT : Marca un punt on es pot tornar, com una copia de seguretat 
COMMIT     : Buida el portapapeles, deixa definitiu un canvi


SELECT: Serveix per a fer consultes a la BD (Important no fa cap canvi!!)



---------------------------------
Exemples SELECT
---------------------------------

SELECT Count(*) "Num de matricula"
FROM alumne a OUTER JOIN matricula
m ON a.idalu = m.idalu WHERE grupo='1HISX'
GROUP BY idalu HAVING count(*)>1;  --> aquesta linea fa que es mostrin els repetidors

Aixo faria una consulta que ens diu cuantes matriculas hi han en el grup de 1HISX


---------------------------------
Exemples de DML amb TCL
---------------------------------
BEGIN TRANSACTION;

INSERT INTO alumne
VALUES (1, 'Jordi', 'M02', '1HISX'.....);

DELETE FROM matricula WHERE idalu ='a241477jr';

SAVE POINT SP1;

UPDATE matricula
SET curs_Acad ='24/25'
WHERE curs_Acad ='23/24';

ROLLBACK TO SP1; --> No tanca la transaccio

COMMIT; --> un cop hem fet el COMMIT tot el que hem definit es definitiu i no es pot tornar enrere (hem de estar segurs)

---------------------------------
---------------------------------


Tipus de dades: (Formats)

Text             --> Text
Numeric o Int    --> Numero
Boolean o Booleà --> True \ False
Data o date      --> fecha



---------------------------------
---------------------------------


Nivells conceptuals de una BD

            -------------  
            |   Users   |
            -------------
                  |
                  |
          ------------------        ---> El que volem que el usuari pugui veure
          |   User Views   |        ---> Conceptes, regles
          ------------------
                  |
                  |---------------------> Esquema ER
       --------------------------
       |   Esquema conceptual   |   ---> Com volem estructurar la BD/Taulas/etc...
       --------------------------   ---> Regles, Traduccions
                  |---------------------> Hasta aqui Peiper
       --------------------------
       |     Esquema Lògic      |
       --------------------------
                  |
       --------------------------
       |  Representacio fisica  |   ---> Nivell intern / INDEX
       --------------------------        
--------------------------------------------
--------------------------------------------

Tipus de Usuaris (En una BD)

Usuaris informatics
    Dissenyador Lògic --> Crea el que se li demana
    Dissenyador Físic --> Optimitza el programari
    Administradors    --> Normalment es el DBA i usa DCL
    Analista i programador --> Es dediquen a plantejar possibles situacions i programar-les
Usuaris Finals
    Habituals
    Esporàdics

 - Esquema:
Descripció de l'estructura de les dades, resultat d'aplicar un model de
dades sobre la informació del món real.
La representació es realitza mitjançant un model conceptual de dades.

 - Model conceptual de dades:
Conjunt de conceptes, regles i convencions que permeten descriure les
dades del món real amb un alt nivell d'abstracció.

Tant l'esquema com el model conceptuals s'engloben en la primera fase de
disseny d'una base de dades.

Model: es la eina que ens permet convertir informacio que ens dona el client i ho convertim a ina BD

Entitat  ES UNA ESTRUCTURA QUE ENS PERMET DESCRIURE LA REALITAT (Taula) --> atributs (Camps)
ex: 
Entitat Alumne, te com a atributs: DNI Nom, Cognom, Data naix, Usuari
Entitat Modul, te com a atributs: Id Modul, Nom del Modul, Hores, Cicle


Tipus de Entitats 
 - Regular: Tenen una existencia propia, tenen un motiu inicial per a existir. (Llibre)/(Socis)
 - Febles: La seva existencia depen de altres Entitats(Prestec dels Socis)

Ocurrencia de la entidad: Posar valors a una taula, com per exemple omplir la taula de Alumne (dni, nom, cognom, etc.) Cada futura linea

Domini: Conjunt de valors vàlids que agafa un atribut (UN formulari que només deixa triar uns valors ja especificats) "Desplegable"

Relació: Asociació/Vincula entre dues enitats (verbs)/(esdeveniments)
    EX:   ALUMNE --- (Es matricula) ---> MODUL
    EX:   MODUL  --- (Verb) ---> Alumne
    

Caracteristiques de una Interrelació:
Nombre: Com nombrem a aquesta Interrelació
Grau: Numero de tipus de entitats que participen en la relació (Binaria, Ternaria, n-aria)



CARDINALIDAD: Cuantes vegades un element d'una entitat es pot relacionar amb elements d'una altra entitat
   	 1:m = de una a varios   ex: 1 client moltes commandes / una commanda només pot tenir un client
   	 1:1 = un llibre, una editorial
   	 m:n = (1,n) ---> /(0,n)  	(CARDINALITAT DE LA RELACIO)
   	 
   	 PRODUCTO --- 0,N ---> FACTURA
   	 FACTURA ---- 1,N ---> PRODUCTO 	(CARDINALITATS DE LES ENTITATS)


Podrem fer una relacio en cicle nomes quan hi hagi un minim 0 de cardinalitat
